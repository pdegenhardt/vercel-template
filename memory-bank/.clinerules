# Project Intelligence (.clinerules)

This file captures important patterns, preferences, and project intelligence for the Admin Dashboard template. It contains learned insights from implementation that help streamline work on the project.

## Code Style & Formatting

- Use TypeScript for all code files
- Add the "use client" directive at the top of all component files that use hooks or browser APIs
- Follow functional component approach with React (function declarations for page components, arrow functions for smaller components)
- Use destructuring for props with TypeScript interfaces
- Organize imports consistently:
  1. React/Next.js imports
  2. External library imports
  3. Internal components/utilities
  4. Types/interfaces
  5. Styles/assets
- Export page components as default exports, but use named exports for utility components
- Use consistent naming pattern: `page.tsx` for route pages, `layout.tsx` for layouts

## Implemented Directory Structure

The project follows this proven directory structure:

```
src/
├── app/                      # Next.js app router pages
│   ├── (auth)/               # Auth routes with centered layout
│   │   ├── sign-in/
│   │   └── sign-up/
│   ├── (dashboard)/          # Dashboard routes with sidebar layout
│   │   ├── dashboard/
│   │   ├── data/
│   │   ├── profile/
│   │   └── tasks/
│   └── api/                  # API routes
├── components/               # Organized by feature domain
│   ├── ui/                   # shadcn/ui components
│   ├── auth/                 # Authentication components
│   ├── dashboard/            # Dashboard-specific components
│   ├── data-table/           # Table components
│   └── tasks/                # Task management components
├── lib/                      # Utility functions and configurations
│   ├── validations/          # Zod schemas organized by domain
│   └── data-service.ts       # Mock data service pattern
├── store/                    # Zustand stores
├── hooks/                    # Custom React hooks
└── types/                    # TypeScript type definitions
```

## Component Patterns

### shadcn/ui Usage Pattern
- Import and use primitive components directly from `@/components/ui/`
- Create feature-specific components in domain folders (auth, dashboard, etc.)
- Compose complex UIs from smaller components rather than building monolithic ones
- Use consistent card-based layouts for content sections

### Reusable Form Pattern
```tsx
// Form component with consistent pattern
export function MyForm() {
  const form = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),
    defaultValues: { /* defaults */ },
  });
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="fieldName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Label</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
```

### Dialog Management Pattern
- Use React state to manage dialog open state
- Pass open state and setter to Dialog component
- Handle form submission and cancelation within dialog
- Use DialogFooter for action buttons

## State Management Patterns

### Zustand Store Pattern
```tsx
// Zustand store with TypeScript and persistence
export const useStore = create<StoreState>()(
  persist(
    (set) => ({
      items: [],
      addItem: (item) => set((state) => ({
        items: [...state.items, { ...item, id: uuidv4() }],
      })),
      // More actions...
    }),
    { name: 'storage-key' }
  )
);
```

### Loading State Pattern
```tsx
// Component with loading state
function MyComponent() {
  const [isLoading, setIsLoading] = useState(false);
  
  const handleAction = async () => {
    setIsLoading(true);
    try {
      // Async operation
    } catch (error) {
      // Error handling
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <Button onClick={handleAction} disabled={isLoading}>
      {isLoading ? "Loading..." : "Action"}
    </Button>
  );
}
```

## Authentication Implementation

### NextAuth.js Pattern
- Configure providers in `lib/auth.ts`
- Create session types with proper role extensions
- Use middleware for route protection
- Wrap root layout with SessionProvider
- Access session with useSession hook in client components

### Auth Form Pattern
- Use React Hook Form with Zod validation
- Implement clear error states for form feedback
- Add loading states during authentication
- Provide social login options using NextAuth providers

## Data Management Patterns

### Simulated API Service Pattern
```tsx
// Mock service with delay for realistic UX
const dataService = {
  async getItems(params) {
    await delay(500); // Simulate network delay
    
    // Process and return data
    return { items, meta };
  },
  // Other CRUD methods...
};
```

### Generic Table Component Pattern
```tsx
// Reusable table with TypeScript generics
export function DataTable<T>({
  data,
  columns,
  onEdit,
  onDelete,
  pagination,
}: DataTableProps<T>) {
  // Implementation
}
```

## Project-Specific Conventions

### Status Indicators
- Use consistent color coding for status:
  - Green for "active" or "done"
  - Yellow for "pending" or "review"
  - Red for "inactive" or errors
  - Blue for "in-progress" or info

### Card Layout Pattern
- Use consistent card-based layout for content sections
- Apply standard spacing between cards (gap-4)
- Group related cards in responsive grid layouts

### Form Dialog Workflow
1. Open dialog with trigger button
2. Present form with validation
3. Submit with loading state
4. Close dialog on success and refresh data
5. Show error messages on failure

This document will continue to evolve as further patterns and optimizations are discovered during development.
